// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String?   @unique
  image    String?
  password String
  role     Roles
  accounts Account[]
  sessions Session[]
  order    order[]
  items    items[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Roles {
  admin
  user
}

model order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  total       Float
  items       items[]  @relation("OrdersItems", fields: [itemsId], references: [id])
  itemsId     String[] @db.ObjectId
  status      Status   @default(in_progress)
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  in_progress
  completed
  canceled
}

model items {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float?
  orders    order[]  @relation("OrdersItems", fields: [ordersId], references: [id])
  ordersId  String[] @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
